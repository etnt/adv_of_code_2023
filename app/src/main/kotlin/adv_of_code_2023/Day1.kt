/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package adv_of_code_2023

import java.io.File
import java.io.FileNotFoundException


class Day1 {
    
    // Initial Prompt was ( https://adventofcode.com/2023/day/1 ):
    // I want to read a text file where each line contains charcters
    // where a value can be found by combining the first digit and the
    // last digit (in that order) to form a single two-digit number
    // which alls should be added together.
    // The digits may not be at the beginning or end of the line.
    fun calculateSum(filename: String): Int {
        var sum = 0
        try {
            File(filename).forEachLine { line ->
                sum += calculateLineSum(line)
            }
        } catch (e: FileNotFoundException) {
            println("File not found: ${e.message}")
        }
        return sum
    }
    
    private fun calculateLineSum(line: String): Int {
        val digits = "\\d".toRegex().findAll(line).map { it.value.toInt() }.toList()
        if (digits.size >= 1) {
            val firstDigit = digits.first()
            val lastDigit = digits.last()
            return firstDigit * 10 + lastDigit
        }
        return 0
    }

    fun calculateSum3(filename: String): Int {
        var sum = 0
        try {
            File(filename).forEachLine { line ->
                sum += calculateLineSum3(line)
            }
        } catch (e: FileNotFoundException) {
            println("File not found: ${e.message}")
        }
        return sum
    }

    private fun calculateLineSum3(line: String): Int {
        
        val digitMap = mapOf(
            "one" to 1,
            "two" to 2,
            "three" to 3,
            "four" to 4,
            "five" to 5,
            "six" to 6,
            "seven" to 7,
            "eight" to 8,
            "nine" to 9
        )   
    
        val sz = line.length - 1
        val forward = 0..sz
        val backward = sz downTo 0
        var first = 0
        var last = 0

        floop@ for (i in forward) {
            if (line[i].isDigit()) {
                first = line[i].digitToInt()
                break
            } else if (line[i].isLetter()) {
                for (w in digitMap) {
                    if (line.startsWith(w.key, startIndex = i)) {
                        first = w.value
                        break@floop
                    }
                }
            }
        }

        bloop@ for (i in backward) {
            if (line[i].isDigit()) {
                last = line[i].digitToInt()
                break
            } else if (line[i].isLetter()) {
                for (w in digitMap) {
                    if (line.startsWith(w.key, startIndex = i)) {
                        last = w.value
                        break@bloop
                    }
                }
            }
        }
        if (first != 0 && last != 0) {
            return "$first$last".toInt()
        } else {
            return 0
        }
        
    }
}



fun main() {
    println("Current directory: ${System.getProperty("user.dir")}")

    val day1 = Day1() 

    val sum = day1.calculateSum("data/adv-code-2023-1-input.txt")
    println("Sum1: $sum")

    val sum2 = day1.calculateSum3("data/adv-code-2023-1-input.txt")
    println("Sum2: $sum2")


}
