/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package adv_of_code_2023

import java.io.File
import java.io.FileNotFoundException


class Day2 {
    
    // Prompt:
    // Write a function that read game strings from a file and for each line
    // invoke the processGame function. For every true result add the game numbers
    // together to form a final sum of all true game strings.
    //
    fun processGamesFromFile(filename: String, predefinedMap: Map<String, Int>): Int {
        var sum = 0

        try {
            File(filename).readLines().forEach { line ->
                val (gameNumber, result) = processGame(line, predefinedMap)
                if (result) {
                    sum += gameNumber.toInt()
                }
            }
        } catch (e: FileNotFoundException) {
            println("File not found: $filename")
        }

        return sum
    }

    fun processGame(gameString: String, predefinedMap: Map<String, Int>): Pair<String, Boolean> { 

        val (gameNumber, colorMaps) = parseGameString(gameString)
        val result = checkMaps(colorMaps, predefinedMap)

        return gameNumber to result
    }

    // Initial Prompt was ( https://adventofcode.com/2023/day/2 ):
    //
    // The following string: "Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green"
    // means that game number one consisted of three parts where part one resulted
    // in three blue and four red, part two resulted in one red, two green and 6 blue,
    // part thre resulted in 2 green. Write code that can return the game number and
    // a list of maps holding the colors and number pairs.
    //
    fun parseGameString(gameString: String): Pair<String, List<Map<String, Int>>> {
        val parts = gameString.split(": ")
        val gameNumber = parts[0].removePrefix("Game ")
        val gameParts = parts[1].split("; ")

        val colorMaps = gameParts.map { part ->
            val colorNumberPairs = part.split(", ")
            val colorMap = colorNumberPairs.map { pair ->
                val colorNumber = pair.split(" ")
                colorNumber[1] to colorNumber[0].toInt()
            }.toMap()
            colorMap
        }
        return gameNumber to colorMaps
    }

    // Prompt:
    // Write a function that checks if each and every map elements in the
    // resulting list of maps are less or equal to a predifined map.
    //
    fun checkMaps(maps: List<Map<String, Int>>, predefinedMap: Map<String, Int>): Boolean {
        for (map in maps) {
            for ((key, value) in map) {
                val predefinedValue = predefinedMap[key]
                if (predefinedValue == null || value > predefinedValue) {
                    return false
                }
            }
        }
        return true
    }

}



fun main() {
    println("Current directory: ${System.getProperty("user.dir")}")

    val day2 = Day2() 

    val predefinedMap = mapOf("blue" to 14, "red" to 12, "green" to 13)
    val filename = "data/adv-code-2023-2-input.txt"
    val sum = day2.processGamesFromFile(filename, predefinedMap)

    println("Sum of game numbers for which all maps are less than or equal to the predefined map: $sum")

}
